- MultiTenant
  - Exemplos
    - Shopfy
    - Vtex
    - Uol Ecommerce
    - Vários outros
    
	- Imprescindível ter um tenant_id. Esse será uma coluna para cada tabela
  - SaaS applications

	- Cenários:
		- Um único banco com todos os tenats 
			- Um cliente pode consumir mais recursos que outros. 
			- Dificuldade para escalar
			- Mais fácil de começar
			- Em determinados nichos pode funcionar durante anos assim
			- Pode começar com uma única máquina

		- Um único banco com um squema por tenant
			- Um cliente pode consumir mais recursos que outros. 
			- Com balancear? 
			- Com fazer sharding?
			- Dificuldade para escalar
			- Pode começar com uma única máquina

		- Um BD monolito para cada tenant (cliente): 
			- Cada tenant pode usar uma estratégia diferente de escalabilidade:
				- Sharding
				- Master-Slave
				- Facilidade para escalar
				- Pode começar com uma única máquina

		- Microservices: Divisão pode funcionalidade
      - Mais escalável
			- Cada funcionalidade (frente de loja, busca de produto, carrinho, checkout...) possui seu próprio sistema/microservice
			- Dentro de cada microsevice podemos ter uma estratégia diferente de armazenamento de dados:
				- Cada tabela ter o seu próprio tenant_id
				- Um BD para cada cliente
				- Sharding/Master-Slave para determinados clientes
				- Possibilidade de escalar cada cliente individualmente
        
- Referências
  - https://www.citusdata.com/blog/2017/08/28/five-data-models-for-sharding/
